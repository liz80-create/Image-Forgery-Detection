/**
 * Single Page Nav Plugin
 * Copyright (c) 2014 Chris Wojcik <cpw1485@gmail.com>
 * Dual licensed under MIT and GPL.
 * @author Chris Wojcik
 * @version 1.2.1
 */
"function"!=typeof Object.create&&(Object.create=function(a){function b(){}return b.prototype=a,new b}),function(a,b,c,d){"use strict";var e={init:function(c,d){this.options=a.extend({},a.fn.singlePageNav.defaults,c),this.container=d,this.$container=a(d),this.$links=this.$container.find("a"),""!==this.options.filter&&(this.$links=this.$links.filter(this.options.filter)),this.$window=a(b),this.$htmlbody=a("html, body"),this.$links.on("click.singlePageNav",a.proxy(this.handleClick,this)),this.didScroll=!1,this.checkPosition(),this.setTimer()},handleClick:function(b){var c=this,d=b.currentTarget,e=a(d.hash);b.preventDefault(),e.length&&(c.clearTimer(),"function"==typeof c.options.beforeStart&&c.options.beforeStart(),c.setActiveLink(d.hash),c.scrollTo(e,function(){c.options.updateHash&&history.pushState&&history.pushState(null,null,d.hash),c.setTimer(),"function"==typeof c.options.onComplete&&c.options.onComplete()}))},scrollTo:function(a,b){var c=this,d=c.getCoords(a).top,e=!1;c.$htmlbody.stop().animate({scrollTop:d},{duration:c.options.speed,easing:c.options.easing,complete:function(){"function"!=typeof b||e||b(),e=!0}})},setTimer:function(){var a=this;a.$window.on("scroll.singlePageNav",function(){a.didScroll=!0}),a.timer=setInterval(function(){a.didScroll&&(a.didScroll=!1,a.checkPosition())},250)},clearTimer:function(){clearInterval(this.timer),this.$window.off("scroll.singlePageNav"),this.didScroll=!1},checkPosition:function(){var a=this.$window.scrollTop(),b=this.getCurrentSection(a);null!==b&&this.setActiveLink(b)},getCoords:function(a){return{top:Math.round(a.offset().top)-this.options.offset}},setActiveLink:function(a){var b=this.$container.find("a[href$='"+a+"']");b.hasClass(this.options.currentClass)||(this.$links.removeClass(this.options.currentClass),b.addClass(this.options.currentClass))},getCurrentSection:function(d){var e,f,g,h;for(e=0;e<this.$links.length;e++)f=this.$links[e].hash,a(f).length&&(g=this.getCoords(a(f)),d>=g.top-this.options.threshold&&(h=f));var i=a(c).height()-a(b).height();if(d==i){var j=this.$links.length;j>0&&(h=this.$links[j-1].hash)}return h||(0===this.$links.length?null:this.$links[0].hash)}};a.fn.singlePageNav=function(a){return this.each(function(){var b=Object.create(e);b.init(a,this)})},a.fn.singlePageNav.defaults={offset:0,threshold:120,speed:400,currentClass:"current",easing:"swing",updateHash:!1,filter:"",onComplete:!1,beforeStart:!1}}(jQuery,window,document);

// Add this JavaScript code for the vibration effect
document.querySelectorAll('.hover-vibrate').forEach(button => {
    button.addEventListener('mouseover', () => {
      // Trigger vibration
      navigator.vibrate(200);
    });
  });






//   // Create a Three.js scene, camera, renderer, etc.
// const scene = new THREE.Scene();
// const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
// const renderer = new THREE.WebGLRenderer();
// renderer.setSize(window.innerWidth, window.innerHeight);
// document.body.appendChild(renderer.domElement);

// // Add OrbitControls
// const controls = new THREE.OrbitControls(camera, renderer.domElement);
// controls.update(); // Initial update

// // Create a GLTFLoader instance
// const loader = new THREE.GLTFLoader();

// // Load the 3D model
// loader.load(
//     'https://skfb.ly/6Rpt6',
//     function (gltf) {
//         scene.add(gltf.scene); // Add the loaded scene to your Three.js scene
//     },
//     undefined,
//     function (error) {
//         console.error('Error loading GLTF model', error);
//     }
// );

// // Your render function
// function render() {
//     requestAnimationFrame(render);

//     // Update controls
//     controls.update();

//     // Render scene
//     renderer.render(scene, camera);
// }

// render(); // Call render function




//   // Define global variables
// let scene, camera, renderer;

// // Initialize function
// function init() {
//     // Create scene
//     scene = new THREE.Scene();

//     // Create camera
//     camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
//     camera.position.z = 5;

//     // Create renderer
//     renderer = new THREE.WebGLRenderer();
//     renderer.setSize(window.innerWidth, window.innerHeight);
//     document.getElementById('3d-model-container').appendChild(renderer.domElement);

//     // Load 3D model
//     const loader = new THREE.GLTFLoader();
//     loader.load(
//         'path/to/your/3d-model.glb',
//         function (gltf) {
//             scene.add(gltf.scene);
//         },
//         undefined,
//         function (error) {
//             console.error(error);
//         }
//     );

//     // Add lighting
//     const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
//     scene.add(ambientLight);

//     const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
//     directionalLight.position.set(0, 1, 0);
//     scene.add(directionalLight);

//     // Add controls
//     const controls = new THREE.OrbitControls(camera, renderer.domElement);

//     // Add resize event listener
//     window.addEventListener('resize', onWindowResize);
// }

// // Resize handler
// function onWindowResize() {
//     camera.aspect = window.innerWidth / window.innerHeight;
//     camera.updateProjectionMatrix();
//     renderer.setSize(window.innerWidth, window.innerHeight);
// }

// // Render loop
// function animate() {
//     requestAnimationFrame(animate);
//     renderer.render(scene, camera);
// }

// // Call init function to start
// init();
// animate();
